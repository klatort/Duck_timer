import pygame
import os
import random
import datetime
import librosa
import threading
from concurrent.futures import ThreadPoolExecutor
from src.duck import Duck
from src.renderer import Renderer

class GameManager:
    def __init__(self, hours, minutes, seconds, assets_path):
        
        self.assets_path = assets_path
        
        # Load music files
        music_files = [file for file in os.listdir(os.path.join(self.assets_path, "./assets/sounds/music/")) if file.endswith(".mp3")]
        self.music =  os.path.join(self.assets_path,"./assets/sounds/music/" + random.choice(music_files))
        with ThreadPoolExecutor(max_workers=1) as executor:
            future = executor.submit(self.estimate_bpm, self.music)
        
        pygame.init()
        
        # Get screen dimensions
        info_object = pygame.display.Info()
        self.width, self.height = info_object.current_w, info_object.current_h
        
        self.animation_speed = future.result()
        self.renderer = Renderer(self.width, self.height, self.assets_path)
        
        # Load ducks from JSON files
        # Note: the duck files are generated by the divide_gif.py script
        #       which is located in the assets folder
        #       The script takes a GIF file as input and 
        #       outputs a JSON file in the ducks folder
        #       have in mind the way that this loads the ducks
        #       so you know which is the duck to be rendered on top
        self.ducks = [Duck.from_json(os.path.join(self.assets_path, f"./ducks/{duck_file}"), [self.width, self.height]) for duck_file in os.listdir(os.path.join(self.assets_path,"./ducks")) if duck_file.endswith('.json')]
        
        # Create clock object
        self.clock = pygame.time.Clock()
        self.start_ticks = pygame.time.get_ticks()
        
        # Set target time for countdown
        self.target_time = datetime.datetime.combine(datetime.date.today(), datetime.time(hours, minutes, seconds))
        
        # Load timeup sound
        self.timeup_sound = pygame.mixer.Sound(os.path.join(self.assets_path,'./assets/sounds/timeup.mp3'))      
        
        # Load and play music
        pygame.mixer.music.load(self.music)
        pygame.mixer.music.play(-1)
        
        # Calculate remaining time
        remaining_time = self.target_time - datetime.datetime.now()
        self.countdown_time = remaining_time.total_seconds()
        self.is_time_up = False
        self.time_left = { 'hours': 0, 'minutes': 0, 'seconds': 0}        
        
        self.show_fps = False
        self.running = True
        
        pygame.display.set_icon(pygame.image.load(os.path.join(self.assets_path, "./assets/duck.ico")))
        
        self.running_event = threading.Event()
        self.running_event.set()

    def estimate_bpm(self, filename):
        y, sr = librosa.load(filename)
        tempo, _ = librosa.beat.beat_track(y=y, sr=sr)
        return tempo

    def run_renderer(self):
        while self.running_event.is_set():
            self.renderer.render(self.ducks, self.time_left, self.show_fps)
    
    def run(self):
        try:
            renderer_thread = threading.Thread(target=self.run_renderer, args=())
            renderer_thread.daemon = True
            renderer_thread.start()
        
            while self.running:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        self.running_event.clear()
                        renderer_thread.join()
                        self.running = False
                    elif event.type == pygame.KEYDOWN and event.key == pygame.K_f and pygame.key.get_mods() & pygame.KMOD_ALT:
                        self.show_fps = not self.show_fps

                # Move ducks
                for duck in self.ducks:
                    if not duck.visible:
                        if os.path.basename(self.music) == "driftveil_city.mp3" and duck.is_toothless:
                            duck.animate(self.clock.get_time() / 1000)
                        else:
                            duck.animate(self.clock.get_time() / 1000, self.animation_speed)
                        duck.move(self.width, self.height)

                if not self.is_time_up:
                    # Calculate remaining time
                    total_seconds = self.countdown_time - (pygame.time.get_ticks() - self.start_ticks) // 1000
                    self.time_left['hours'] = 0
                    self.time_left['minutes'] = int(total_seconds // 60)
                    self.time_left['seconds'] = int(total_seconds % 60)
                    if self.time_left['minutes'] >= 60:
                        self.time_left['hours'] = self.time_left['minutes'] // 60
                        self.time_left['minutes'] %= 60                
                    if total_seconds < 0:
                        # Play timeup sound and set time up flag
                        self.timeup_sound.play()
                        self.is_time_up = True

                        # Make ducks visible again
                        for duck in self.ducks:
                            duck.visible = False
                        self.time_left['minutes'] = 0
                        self.time_left['seconds'] = 0
                self.clock.tick(60)
                
        except KeyboardInterrupt:
            self.running_event.clear()
            renderer_thread.join()
            self.running = False
            pygame.quit()
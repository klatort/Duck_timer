import pygame
import librosa
import os
import random
import datetime
from src.duck import Duck

class GameManager:
    def __init__(self, hours, minutes, seconds, assets_path):
        pygame.init()
        self.assets_path = assets_path        
        
        # Get screen dimensions
        self.info_object = pygame.display.Info()
        self.width, self.height = self.info_object.current_w, self.info_object.current_h
        
        # Load music files
        self.music_files = [file for file in os.listdir(os.path.join(self.assets_path, "./assets/sounds/music/")) if file.endswith(".mp3")]
        self.music =  os.path.join(self.assets_path,"./assets/sounds/music/" + random.choice(self.music_files))
        
        # Load ducks from JSON files
        # Note: the duck files are generated by the divide_gif.py script
        #       which is located in the assets folder
        #       The script takes a GIF file as input and 
        #       outputs a JSON file in the ducks folder
        #       have in mind the way that this loads the ducks
        #       so you know which is the duck to be rendered on top
        self.ducks = [Duck.from_json(os.path.join(self.assets_path, f"./ducks/{duck_file}"), [self.width, self.height]) for duck_file in os.listdir(os.path.join(self.assets_path,"./ducks")) if duck_file.endswith('.json')]
        
        # Estimate animation speed based on music tempo
        self.animation_speed = self.estimate_bpm(self.music)
        
        # Set font properties
        self.font_name = os.path.join(self.assets_path, "./assets/font.ttf")
        self.font_size = int(self.height * 0.2)
        
        # Create screen and font objects
        self.screen = pygame.display.set_mode((self.width, self.height), pygame.NOFRAME)
        self.font = pygame.font.Font(self.font_name, self.font_size)
        
        # Create clock object
        self.clock = pygame.time.Clock()
        self.start_ticks = pygame.time.get_ticks()
        
        # Set target time for countdown
        self.target_time = datetime.datetime.combine(datetime.date.today(), datetime.time(hours, minutes, seconds))
        
        # Load timeup sound
        self.timeup_sound = pygame.mixer.Sound(os.path.join(self.assets_path,'./assets/sounds/timeup.mp3'))      
        
        # Load and play music
        pygame.mixer.music.load(self.music)
        pygame.mixer.music.play(-1)
        
        # Calculate remaining time
        remaining_time = self.target_time - datetime.datetime.now()
        self.countdown_time = remaining_time.total_seconds()
        self.is_time_up = False

    def estimate_bpm(self, filename):
        y, sr = librosa.load(filename)
        tempo, _ = librosa.beat.beat_track(y=y, sr=sr)
        return tempo

    def run(self):
        running = True
        show_fps = False
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN and event.key == pygame.K_f and pygame.key.get_mods() & pygame.KMOD_ALT:
                    show_fps = not show_fps

            # Animate ducks
            for duck in self.ducks:
                # Giving toothless special treatment
                if  os.path.basename(self.music) == "driftveil_city.mp3" and duck.is_toothless:
                    duck.animate(self.clock.get_time() / 1000)
                else:
                    duck.animate(self.clock.get_time() / 1000, self.animation_speed)
            
            # Move ducks
            for duck in self.ducks:
                duck.move(self.width, self.height)
            
            if not self.is_time_up:
                # Calculate remaining time
                total_seconds = self.countdown_time - (pygame.time.get_ticks() - self.start_ticks) // 1000
                hours = 0
                minutes = int(total_seconds // 60)
                seconds = int(total_seconds % 60)
                if minutes >= 60:
                    hours = int(minutes // 60)
                    minutes = int(minutes % 60)
                
                if total_seconds < 0:
                    # Play timeup sound and set time up flag
                    self.timeup_sound.play()
                    self.is_time_up = True
                    
                    # Make ducks visible again
                    for duck in self.ducks:
                        duck.invisible = False
                    
                    minutes = 0
                    seconds = 0
                
                # Render timer text
                if hours > 0:
                    timer_text = self.font.render(f"{hours:02}:{minutes:02}:{seconds:02}", True, (0, 0, 0))
                else:
                    timer_text = self.font.render(f"{minutes:02}:{seconds:02}", True, (0, 0, 0))
            
            # Clear screen
            self.screen.fill((95, 188, 99))
            
            # Draw ducks
            for duck in self.ducks:
                duck.draw(self.screen)
                
            # Draw timer text
            self.screen.blit(timer_text, (self.width * 0.5 - ((0.75 if hours <= 0 else 2) * self.font_size), self.height * 0.5 - self.font_size * 0.625))
            
            # Draw FPS
            if show_fps:
                small_font = pygame.font.Font(None, int(self.height * 0.04))
                fps_text = small_font.render(f"{int(self.clock.get_fps()):02}", True, (255, 0, 0))
                self.screen.blit(fps_text, (self.width - (self.height * 0.037), 0))

            pygame.display.flip()
            self.clock.tick(30)

        pygame.quit()
